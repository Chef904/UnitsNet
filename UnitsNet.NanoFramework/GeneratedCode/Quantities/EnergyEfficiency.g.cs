//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     
    /// </summary>
    public struct  EnergyEfficiency
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EnergyEfficiencyUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public EnergyEfficiencyUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public EnergyEfficiency(double value, EnergyEfficiencyUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of EnergyEfficiency, which is Second. All conversions go via this value.
        /// </summary>
        public static EnergyEfficiencyUnit BaseUnit { get; } = EnergyEfficiencyUnit.WattHourPerKilometer;

        /// <summary>
        /// Represents the largest possible value of EnergyEfficiency.
        /// </summary>
        public static EnergyEfficiency MaxValue { get; } = new EnergyEfficiency(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of EnergyEfficiency.
        /// </summary>
        public static EnergyEfficiency MinValue { get; } = new EnergyEfficiency(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static EnergyEfficiency Zero { get; } = new EnergyEfficiency(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.FemtowattHourPerKilometer"/>
        /// </summary>
        public double FemtowattHoursPerKilometer => As(EnergyEfficiencyUnit.FemtowattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.FemtowattHourPerMeter"/>
        /// </summary>
        public double FemtowattHoursPerMeter => As(EnergyEfficiencyUnit.FemtowattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.GigawattHourPerKilometer"/>
        /// </summary>
        public double GigawattHoursPerKilometer => As(EnergyEfficiencyUnit.GigawattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.GigawattHourPerMeter"/>
        /// </summary>
        public double GigawattHoursPerMeter => As(EnergyEfficiencyUnit.GigawattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.KilowattHourPerKilometer"/>
        /// </summary>
        public double KilowattHoursPerKilometer => As(EnergyEfficiencyUnit.KilowattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.KilowattHourPerMeter"/>
        /// </summary>
        public double KilowattHoursPerMeter => As(EnergyEfficiencyUnit.KilowattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.MegawattHourPerKilometer"/>
        /// </summary>
        public double MegawattHoursPerKilometer => As(EnergyEfficiencyUnit.MegawattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.MegawattHourPerMeter"/>
        /// </summary>
        public double MegawattHoursPerMeter => As(EnergyEfficiencyUnit.MegawattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.MicrowattHourPerKilometer"/>
        /// </summary>
        public double MicrowattHoursPerKilometer => As(EnergyEfficiencyUnit.MicrowattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.MicrowattHourPerMeter"/>
        /// </summary>
        public double MicrowattHoursPerMeter => As(EnergyEfficiencyUnit.MicrowattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.MilliwattHourPerKilometer"/>
        /// </summary>
        public double MilliwattHoursPerKilometer => As(EnergyEfficiencyUnit.MilliwattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.MilliwattHourPerMeter"/>
        /// </summary>
        public double MilliwattHoursPerMeter => As(EnergyEfficiencyUnit.MilliwattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.NanowattHourPerKilometer"/>
        /// </summary>
        public double NanowattHoursPerKilometer => As(EnergyEfficiencyUnit.NanowattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.NanowattHourPerMeter"/>
        /// </summary>
        public double NanowattHoursPerMeter => As(EnergyEfficiencyUnit.NanowattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.PicowattHourPerKilometer"/>
        /// </summary>
        public double PicowattHoursPerKilometer => As(EnergyEfficiencyUnit.PicowattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.PicowattHourPerMeter"/>
        /// </summary>
        public double PicowattHoursPerMeter => As(EnergyEfficiencyUnit.PicowattHourPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.WattHourPerKilometer"/>
        /// </summary>
        public double WattHoursPerKilometer => As(EnergyEfficiencyUnit.WattHourPerKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="EnergyEfficiencyUnit.WattHourPerMeter"/>
        /// </summary>
        public double WattHoursPerMeter => As(EnergyEfficiencyUnit.WattHourPerMeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.FemtowattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromFemtowattHoursPerKilometer(double femtowatthoursperkilometer) => new EnergyEfficiency(femtowatthoursperkilometer, EnergyEfficiencyUnit.FemtowattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.FemtowattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromFemtowattHoursPerMeter(double femtowatthourspermeter) => new EnergyEfficiency(femtowatthourspermeter, EnergyEfficiencyUnit.FemtowattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.GigawattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromGigawattHoursPerKilometer(double gigawatthoursperkilometer) => new EnergyEfficiency(gigawatthoursperkilometer, EnergyEfficiencyUnit.GigawattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.GigawattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromGigawattHoursPerMeter(double gigawatthourspermeter) => new EnergyEfficiency(gigawatthourspermeter, EnergyEfficiencyUnit.GigawattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.KilowattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromKilowattHoursPerKilometer(double kilowatthoursperkilometer) => new EnergyEfficiency(kilowatthoursperkilometer, EnergyEfficiencyUnit.KilowattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.KilowattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromKilowattHoursPerMeter(double kilowatthourspermeter) => new EnergyEfficiency(kilowatthourspermeter, EnergyEfficiencyUnit.KilowattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.MegawattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromMegawattHoursPerKilometer(double megawatthoursperkilometer) => new EnergyEfficiency(megawatthoursperkilometer, EnergyEfficiencyUnit.MegawattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.MegawattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromMegawattHoursPerMeter(double megawatthourspermeter) => new EnergyEfficiency(megawatthourspermeter, EnergyEfficiencyUnit.MegawattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.MicrowattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromMicrowattHoursPerKilometer(double microwatthoursperkilometer) => new EnergyEfficiency(microwatthoursperkilometer, EnergyEfficiencyUnit.MicrowattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.MicrowattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromMicrowattHoursPerMeter(double microwatthourspermeter) => new EnergyEfficiency(microwatthourspermeter, EnergyEfficiencyUnit.MicrowattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.MilliwattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromMilliwattHoursPerKilometer(double milliwatthoursperkilometer) => new EnergyEfficiency(milliwatthoursperkilometer, EnergyEfficiencyUnit.MilliwattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.MilliwattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromMilliwattHoursPerMeter(double milliwatthourspermeter) => new EnergyEfficiency(milliwatthourspermeter, EnergyEfficiencyUnit.MilliwattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.NanowattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromNanowattHoursPerKilometer(double nanowatthoursperkilometer) => new EnergyEfficiency(nanowatthoursperkilometer, EnergyEfficiencyUnit.NanowattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.NanowattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromNanowattHoursPerMeter(double nanowatthourspermeter) => new EnergyEfficiency(nanowatthourspermeter, EnergyEfficiencyUnit.NanowattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.PicowattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromPicowattHoursPerKilometer(double picowatthoursperkilometer) => new EnergyEfficiency(picowatthoursperkilometer, EnergyEfficiencyUnit.PicowattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.PicowattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromPicowattHoursPerMeter(double picowatthourspermeter) => new EnergyEfficiency(picowatthourspermeter, EnergyEfficiencyUnit.PicowattHourPerMeter);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.WattHourPerKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromWattHoursPerKilometer(double watthoursperkilometer) => new EnergyEfficiency(watthoursperkilometer, EnergyEfficiencyUnit.WattHourPerKilometer);

        /// <summary>
        ///     Creates a <see cref="EnergyEfficiency"/> from <see cref="EnergyEfficiencyUnit.WattHourPerMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyEfficiency FromWattHoursPerMeter(double watthourspermeter) => new EnergyEfficiency(watthourspermeter, EnergyEfficiencyUnit.WattHourPerMeter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnergyEfficiencyUnit" /> to <see cref="EnergyEfficiency" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>EnergyEfficiency unit value.</returns>
        public static EnergyEfficiency From(double value, EnergyEfficiencyUnit fromUnit)
        {
            return new EnergyEfficiency(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(EnergyEfficiencyUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this EnergyEfficiency to another EnergyEfficiency with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A EnergyEfficiency with the specified unit.</returns>
                public EnergyEfficiency ToUnit(EnergyEfficiencyUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new EnergyEfficiency(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        EnergyEfficiencyUnit.FemtowattHourPerKilometer => (_value) * 1e-15d,
                        EnergyEfficiencyUnit.FemtowattHourPerMeter => (_value / 1e3) * 1e-15d,
                        EnergyEfficiencyUnit.GigawattHourPerKilometer => (_value) * 1e9d,
                        EnergyEfficiencyUnit.GigawattHourPerMeter => (_value / 1e3) * 1e9d,
                        EnergyEfficiencyUnit.KilowattHourPerKilometer => (_value) * 1e3d,
                        EnergyEfficiencyUnit.KilowattHourPerMeter => (_value / 1e3) * 1e3d,
                        EnergyEfficiencyUnit.MegawattHourPerKilometer => (_value) * 1e6d,
                        EnergyEfficiencyUnit.MegawattHourPerMeter => (_value / 1e3) * 1e6d,
                        EnergyEfficiencyUnit.MicrowattHourPerKilometer => (_value) * 1e-6d,
                        EnergyEfficiencyUnit.MicrowattHourPerMeter => (_value / 1e3) * 1e-6d,
                        EnergyEfficiencyUnit.MilliwattHourPerKilometer => (_value) * 1e-3d,
                        EnergyEfficiencyUnit.MilliwattHourPerMeter => (_value / 1e3) * 1e-3d,
                        EnergyEfficiencyUnit.NanowattHourPerKilometer => (_value) * 1e-9d,
                        EnergyEfficiencyUnit.NanowattHourPerMeter => (_value / 1e3) * 1e-9d,
                        EnergyEfficiencyUnit.PicowattHourPerKilometer => (_value) * 1e-12d,
                        EnergyEfficiencyUnit.PicowattHourPerMeter => (_value / 1e3) * 1e-12d,
                        EnergyEfficiencyUnit.WattHourPerKilometer => _value,
                        EnergyEfficiencyUnit.WattHourPerMeter => _value / 1e3,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(EnergyEfficiencyUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        EnergyEfficiencyUnit.FemtowattHourPerKilometer => (baseUnitValue) / 1e-15d,
                        EnergyEfficiencyUnit.FemtowattHourPerMeter => (baseUnitValue * 1e3) / 1e-15d,
                        EnergyEfficiencyUnit.GigawattHourPerKilometer => (baseUnitValue) / 1e9d,
                        EnergyEfficiencyUnit.GigawattHourPerMeter => (baseUnitValue * 1e3) / 1e9d,
                        EnergyEfficiencyUnit.KilowattHourPerKilometer => (baseUnitValue) / 1e3d,
                        EnergyEfficiencyUnit.KilowattHourPerMeter => (baseUnitValue * 1e3) / 1e3d,
                        EnergyEfficiencyUnit.MegawattHourPerKilometer => (baseUnitValue) / 1e6d,
                        EnergyEfficiencyUnit.MegawattHourPerMeter => (baseUnitValue * 1e3) / 1e6d,
                        EnergyEfficiencyUnit.MicrowattHourPerKilometer => (baseUnitValue) / 1e-6d,
                        EnergyEfficiencyUnit.MicrowattHourPerMeter => (baseUnitValue * 1e3) / 1e-6d,
                        EnergyEfficiencyUnit.MilliwattHourPerKilometer => (baseUnitValue) / 1e-3d,
                        EnergyEfficiencyUnit.MilliwattHourPerMeter => (baseUnitValue * 1e3) / 1e-3d,
                        EnergyEfficiencyUnit.NanowattHourPerKilometer => (baseUnitValue) / 1e-9d,
                        EnergyEfficiencyUnit.NanowattHourPerMeter => (baseUnitValue * 1e3) / 1e-9d,
                        EnergyEfficiencyUnit.PicowattHourPerKilometer => (baseUnitValue) / 1e-12d,
                        EnergyEfficiencyUnit.PicowattHourPerMeter => (baseUnitValue * 1e3) / 1e-12d,
                        EnergyEfficiencyUnit.WattHourPerKilometer => baseUnitValue,
                        EnergyEfficiencyUnit.WattHourPerMeter => baseUnitValue * 1e3,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

