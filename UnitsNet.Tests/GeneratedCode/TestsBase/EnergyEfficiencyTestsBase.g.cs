//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of EnergyEfficiency.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyEfficiencyTestsBase : QuantityTestsBase
    {
        protected abstract double FemtowattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double FemtowattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double GigawattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double GigawattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double KilowattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double KilowattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double MegawattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double MegawattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double MicrowattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double MicrowattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double MilliwattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double MilliwattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double NanowattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double NanowattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double PicowattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double PicowattHoursPerMeterInOneWattHourPerKilometer { get; }
        protected abstract double WattHoursPerKilometerInOneWattHourPerKilometer { get; }
        protected abstract double WattHoursPerMeterInOneWattHourPerKilometer { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double FemtowattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double FemtowattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MicrowattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MilliwattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double NanowattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PicowattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double PicowattHoursPerMeterTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(EnergyEfficiencyUnit unit)
        {
            return unit switch
            {
                EnergyEfficiencyUnit.FemtowattHourPerKilometer => (FemtowattHoursPerKilometerInOneWattHourPerKilometer, FemtowattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.FemtowattHourPerMeter => (FemtowattHoursPerMeterInOneWattHourPerKilometer, FemtowattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.GigawattHourPerKilometer => (GigawattHoursPerKilometerInOneWattHourPerKilometer, GigawattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.GigawattHourPerMeter => (GigawattHoursPerMeterInOneWattHourPerKilometer, GigawattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.KilowattHourPerKilometer => (KilowattHoursPerKilometerInOneWattHourPerKilometer, KilowattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.KilowattHourPerMeter => (KilowattHoursPerMeterInOneWattHourPerKilometer, KilowattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.MegawattHourPerKilometer => (MegawattHoursPerKilometerInOneWattHourPerKilometer, MegawattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.MegawattHourPerMeter => (MegawattHoursPerMeterInOneWattHourPerKilometer, MegawattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.MicrowattHourPerKilometer => (MicrowattHoursPerKilometerInOneWattHourPerKilometer, MicrowattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.MicrowattHourPerMeter => (MicrowattHoursPerMeterInOneWattHourPerKilometer, MicrowattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.MilliwattHourPerKilometer => (MilliwattHoursPerKilometerInOneWattHourPerKilometer, MilliwattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.MilliwattHourPerMeter => (MilliwattHoursPerMeterInOneWattHourPerKilometer, MilliwattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.NanowattHourPerKilometer => (NanowattHoursPerKilometerInOneWattHourPerKilometer, NanowattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.NanowattHourPerMeter => (NanowattHoursPerMeterInOneWattHourPerKilometer, NanowattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.PicowattHourPerKilometer => (PicowattHoursPerKilometerInOneWattHourPerKilometer, PicowattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.PicowattHourPerMeter => (PicowattHoursPerMeterInOneWattHourPerKilometer, PicowattHoursPerMeterTolerance),
                EnergyEfficiencyUnit.WattHourPerKilometer => (WattHoursPerKilometerInOneWattHourPerKilometer, WattHoursPerKilometerTolerance),
                EnergyEfficiencyUnit.WattHourPerMeter => (WattHoursPerMeterInOneWattHourPerKilometer, WattHoursPerMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { EnergyEfficiencyUnit.FemtowattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.FemtowattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.GigawattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.GigawattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.KilowattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.KilowattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.MegawattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.MegawattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.MicrowattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.MicrowattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.MilliwattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.MilliwattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.NanowattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.NanowattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.PicowattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.PicowattHourPerMeter },
            new object[] { EnergyEfficiencyUnit.WattHourPerKilometer },
            new object[] { EnergyEfficiencyUnit.WattHourPerMeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new EnergyEfficiency();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnergyEfficiencyUnit.WattHourPerKilometer, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnergyEfficiency(double.PositiveInfinity, EnergyEfficiencyUnit.WattHourPerKilometer));
            Assert.Throws<ArgumentException>(() => new EnergyEfficiency(double.NegativeInfinity, EnergyEfficiencyUnit.WattHourPerKilometer));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnergyEfficiency(double.NaN, EnergyEfficiencyUnit.WattHourPerKilometer));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new EnergyEfficiency(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new EnergyEfficiency(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (EnergyEfficiency) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void EnergyEfficiency_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new EnergyEfficiency(1, EnergyEfficiencyUnit.WattHourPerKilometer);

            QuantityInfo<EnergyEfficiencyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(EnergyEfficiency.Zero, quantityInfo.Zero);
            Assert.Equal("EnergyEfficiency", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<EnergyEfficiencyUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void WattHourPerKilometerToEnergyEfficiencyUnits()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            AssertEx.EqualTolerance(FemtowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.FemtowattHoursPerKilometer, FemtowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(FemtowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.FemtowattHoursPerMeter, FemtowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.GigawattHoursPerKilometer, GigawattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.GigawattHoursPerMeter, GigawattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.KilowattHoursPerKilometer, KilowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.KilowattHoursPerMeter, KilowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.MegawattHoursPerKilometer, MegawattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.MegawattHoursPerMeter, MegawattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(MicrowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.MicrowattHoursPerKilometer, MicrowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(MicrowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.MicrowattHoursPerMeter, MicrowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(MilliwattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.MilliwattHoursPerKilometer, MilliwattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(MilliwattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.MilliwattHoursPerMeter, MilliwattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(NanowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.NanowattHoursPerKilometer, NanowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(NanowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.NanowattHoursPerMeter, NanowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(PicowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.PicowattHoursPerKilometer, PicowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(PicowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.PicowattHoursPerMeter, PicowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(WattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.WattHoursPerMeter, WattHoursPerMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.FemtowattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity00.FemtowattHoursPerKilometer, FemtowattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerKilometer, quantity00.Unit);

            var quantity01 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.FemtowattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity01.FemtowattHoursPerMeter, FemtowattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerMeter, quantity01.Unit);

            var quantity02 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.GigawattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity02.GigawattHoursPerKilometer, GigawattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerKilometer, quantity02.Unit);

            var quantity03 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.GigawattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity03.GigawattHoursPerMeter, GigawattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerMeter, quantity03.Unit);

            var quantity04 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.KilowattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity04.KilowattHoursPerKilometer, KilowattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerKilometer, quantity04.Unit);

            var quantity05 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.KilowattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity05.KilowattHoursPerMeter, KilowattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerMeter, quantity05.Unit);

            var quantity06 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.MegawattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity06.MegawattHoursPerKilometer, MegawattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.MegawattHourPerKilometer, quantity06.Unit);

            var quantity07 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.MegawattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity07.MegawattHoursPerMeter, MegawattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.MegawattHourPerMeter, quantity07.Unit);

            var quantity08 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.MicrowattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity08.MicrowattHoursPerKilometer, MicrowattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerKilometer, quantity08.Unit);

            var quantity09 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.MicrowattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity09.MicrowattHoursPerMeter, MicrowattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerMeter, quantity09.Unit);

            var quantity10 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.MilliwattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity10.MilliwattHoursPerKilometer, MilliwattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.MilliwattHourPerKilometer, quantity10.Unit);

            var quantity11 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.MilliwattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity11.MilliwattHoursPerMeter, MilliwattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.MilliwattHourPerMeter, quantity11.Unit);

            var quantity12 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.NanowattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity12.NanowattHoursPerKilometer, NanowattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerKilometer, quantity12.Unit);

            var quantity13 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.NanowattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity13.NanowattHoursPerMeter, NanowattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerMeter, quantity13.Unit);

            var quantity14 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.PicowattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity14.PicowattHoursPerKilometer, PicowattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerKilometer, quantity14.Unit);

            var quantity15 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.PicowattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity15.PicowattHoursPerMeter, PicowattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerMeter, quantity15.Unit);

            var quantity16 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.WattHourPerKilometer);
            AssertEx.EqualTolerance(1, quantity16.WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            Assert.Equal(EnergyEfficiencyUnit.WattHourPerKilometer, quantity16.Unit);

            var quantity17 = EnergyEfficiency.From(1, EnergyEfficiencyUnit.WattHourPerMeter);
            AssertEx.EqualTolerance(1, quantity17.WattHoursPerMeter, WattHoursPerMeterTolerance);
            Assert.Equal(EnergyEfficiencyUnit.WattHourPerMeter, quantity17.Unit);

        }

        [Fact]
        public void FromWattHoursPerKilometer_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => EnergyEfficiency.FromWattHoursPerKilometer(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => EnergyEfficiency.FromWattHoursPerKilometer(double.NegativeInfinity));
        }

        [Fact]
        public void FromWattHoursPerKilometer_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => EnergyEfficiency.FromWattHoursPerKilometer(double.NaN));
        }

        [Fact]
        public void As()
        {
            var watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            AssertEx.EqualTolerance(FemtowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.FemtowattHourPerKilometer), FemtowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(FemtowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.FemtowattHourPerMeter), FemtowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.GigawattHourPerKilometer), GigawattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.GigawattHourPerMeter), GigawattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.KilowattHourPerKilometer), KilowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.KilowattHourPerMeter), KilowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.MegawattHourPerKilometer), MegawattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.MegawattHourPerMeter), MegawattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(MicrowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.MicrowattHourPerKilometer), MicrowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(MicrowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.MicrowattHourPerMeter), MicrowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(MilliwattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.MilliwattHourPerKilometer), MilliwattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(MilliwattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.MilliwattHourPerMeter), MilliwattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(NanowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.NanowattHourPerKilometer), NanowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(NanowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.NanowattHourPerMeter), NanowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(PicowattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.PicowattHourPerKilometer), PicowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(PicowattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.PicowattHourPerMeter), PicowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilometerInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.WattHourPerKilometer), WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(WattHoursPerMeterInOneWattHourPerKilometer, watthourperkilometer.As(EnergyEfficiencyUnit.WattHourPerMeter), WattHoursPerMeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new EnergyEfficiency(value: 1, unit: EnergyEfficiency.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = EnergyEfficiency.Parse("1 fWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.FemtowattHoursPerKilometer, FemtowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 fWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.FemtowattHoursPerMeter, FemtowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 GWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerKilometer, GigawattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 GWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerMeter, GigawattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 kWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerKilometer, KilowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 kWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerMeter, KilowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 MWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattHoursPerKilometer, MegawattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MegawattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 MWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattHoursPerMeter, MegawattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MegawattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 µWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattHoursPerKilometer, MicrowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 µWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattHoursPerMeter, MicrowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 mWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattHoursPerKilometer, MilliwattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MilliwattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 mWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattHoursPerMeter, MilliwattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MilliwattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 nWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattHoursPerKilometer, NanowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 nWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattHoursPerMeter, NanowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 pWh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattHoursPerKilometer, PicowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 pWh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattHoursPerMeter, PicowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 Wh/km", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerKilometer, WattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerKilometer, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = EnergyEfficiency.Parse("1 Wh/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerMeter, WattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(EnergyEfficiency.TryParse("1 fWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.FemtowattHoursPerKilometer, FemtowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 fWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.FemtowattHoursPerMeter, FemtowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 GWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerKilometer, GigawattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 GWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattHoursPerMeter, GigawattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 kWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerKilometer, KilowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 kWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattHoursPerMeter, KilowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 µWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattHoursPerKilometer, MicrowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 µWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattHoursPerMeter, MicrowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 nWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattHoursPerKilometer, NanowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 nWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattHoursPerMeter, NanowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 pWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattHoursPerKilometer, PicowattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 pWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattHoursPerMeter, PicowattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerMeter, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 Wh/km", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerKilometer, WattHoursPerKilometerTolerance);
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerKilometer, parsed.Unit);
            }

            {
                Assert.True(EnergyEfficiency.TryParse("1 Wh/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattHoursPerMeter, WattHoursPerMeterTolerance);
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerMeter, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("fWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("fWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("GWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("GWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("kWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("kWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("MWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.MegawattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("MWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.MegawattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("µWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("µWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("mWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.MilliwattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("mWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.MilliwattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("nWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("nWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("pWh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("pWh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("Wh/km", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerKilometer, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = EnergyEfficiency.ParseUnit("Wh/m", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(EnergyEfficiency.TryParseUnit("fWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("fWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.FemtowattHourPerMeter, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("GWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("GWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.GigawattHourPerMeter, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("kWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("kWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.KilowattHourPerMeter, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("µWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("µWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.MicrowattHourPerMeter, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("nWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("nWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.NanowattHourPerMeter, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("pWh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("pWh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.PicowattHourPerMeter, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("Wh/km", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerKilometer, parsedUnit);
            }

            {
                Assert.True(EnergyEfficiency.TryParseUnit("Wh/m", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(EnergyEfficiencyUnit.WattHourPerMeter, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(EnergyEfficiencyUnit unit)
        {
            var inBaseUnits = EnergyEfficiency.From(1.0, EnergyEfficiency.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(EnergyEfficiencyUnit unit)
        {
            var quantity = EnergyEfficiency.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(EnergyEfficiencyUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = EnergyEfficiency.Units.First(u => u != EnergyEfficiency.BaseUnit);

            var quantity = EnergyEfficiency.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(EnergyEfficiencyUnit unit)
        {
            var quantity = default(EnergyEfficiency);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromFemtowattHoursPerKilometer(watthourperkilometer.FemtowattHoursPerKilometer).WattHoursPerKilometer, FemtowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromFemtowattHoursPerMeter(watthourperkilometer.FemtowattHoursPerMeter).WattHoursPerKilometer, FemtowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromGigawattHoursPerKilometer(watthourperkilometer.GigawattHoursPerKilometer).WattHoursPerKilometer, GigawattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromGigawattHoursPerMeter(watthourperkilometer.GigawattHoursPerMeter).WattHoursPerKilometer, GigawattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromKilowattHoursPerKilometer(watthourperkilometer.KilowattHoursPerKilometer).WattHoursPerKilometer, KilowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromKilowattHoursPerMeter(watthourperkilometer.KilowattHoursPerMeter).WattHoursPerKilometer, KilowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromMegawattHoursPerKilometer(watthourperkilometer.MegawattHoursPerKilometer).WattHoursPerKilometer, MegawattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromMegawattHoursPerMeter(watthourperkilometer.MegawattHoursPerMeter).WattHoursPerKilometer, MegawattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromMicrowattHoursPerKilometer(watthourperkilometer.MicrowattHoursPerKilometer).WattHoursPerKilometer, MicrowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromMicrowattHoursPerMeter(watthourperkilometer.MicrowattHoursPerMeter).WattHoursPerKilometer, MicrowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromMilliwattHoursPerKilometer(watthourperkilometer.MilliwattHoursPerKilometer).WattHoursPerKilometer, MilliwattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromMilliwattHoursPerMeter(watthourperkilometer.MilliwattHoursPerMeter).WattHoursPerKilometer, MilliwattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromNanowattHoursPerKilometer(watthourperkilometer.NanowattHoursPerKilometer).WattHoursPerKilometer, NanowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromNanowattHoursPerMeter(watthourperkilometer.NanowattHoursPerMeter).WattHoursPerKilometer, NanowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromPicowattHoursPerKilometer(watthourperkilometer.PicowattHoursPerKilometer).WattHoursPerKilometer, PicowattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromPicowattHoursPerMeter(watthourperkilometer.PicowattHoursPerMeter).WattHoursPerKilometer, PicowattHoursPerMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromWattHoursPerKilometer(watthourperkilometer.WattHoursPerKilometer).WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(1, EnergyEfficiency.FromWattHoursPerMeter(watthourperkilometer.WattHoursPerMeter).WattHoursPerKilometer, WattHoursPerMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            EnergyEfficiency v = EnergyEfficiency.FromWattHoursPerKilometer(1);
            AssertEx.EqualTolerance(-1, -v.WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(2, (EnergyEfficiency.FromWattHoursPerKilometer(3)-v).WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(2, (v + v).WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(10, (v*10).WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(10, (10*v).WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(2, (EnergyEfficiency.FromWattHoursPerKilometer(10)/5).WattHoursPerKilometer, WattHoursPerKilometerTolerance);
            AssertEx.EqualTolerance(2, EnergyEfficiency.FromWattHoursPerKilometer(10)/EnergyEfficiency.FromWattHoursPerKilometer(5), WattHoursPerKilometerTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            EnergyEfficiency oneWattHourPerKilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            EnergyEfficiency twoWattHoursPerKilometer = EnergyEfficiency.FromWattHoursPerKilometer(2);

            Assert.True(oneWattHourPerKilometer < twoWattHoursPerKilometer);
            Assert.True(oneWattHourPerKilometer <= twoWattHoursPerKilometer);
            Assert.True(twoWattHoursPerKilometer > oneWattHourPerKilometer);
            Assert.True(twoWattHoursPerKilometer >= oneWattHourPerKilometer);

            Assert.False(oneWattHourPerKilometer > twoWattHoursPerKilometer);
            Assert.False(oneWattHourPerKilometer >= twoWattHoursPerKilometer);
            Assert.False(twoWattHoursPerKilometer < oneWattHourPerKilometer);
            Assert.False(twoWattHoursPerKilometer <= oneWattHourPerKilometer);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.Equal(0, watthourperkilometer.CompareTo(watthourperkilometer));
            Assert.True(watthourperkilometer.CompareTo(EnergyEfficiency.Zero) > 0);
            Assert.True(EnergyEfficiency.Zero.CompareTo(watthourperkilometer) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.Throws<ArgumentException>(() => watthourperkilometer.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.Throws<ArgumentNullException>(() => watthourperkilometer.CompareTo(null));
        }

        [Theory]
        [InlineData(1, EnergyEfficiencyUnit.WattHourPerKilometer, 1, EnergyEfficiencyUnit.WattHourPerKilometer, true)]  // Same value and unit.
        [InlineData(1, EnergyEfficiencyUnit.WattHourPerKilometer, 2, EnergyEfficiencyUnit.WattHourPerKilometer, false)] // Different value.
        [InlineData(2, EnergyEfficiencyUnit.WattHourPerKilometer, 1, EnergyEfficiencyUnit.FemtowattHourPerKilometer, false)] // Different value and unit.
        [InlineData(1, EnergyEfficiencyUnit.WattHourPerKilometer, 1, EnergyEfficiencyUnit.FemtowattHourPerKilometer, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, EnergyEfficiencyUnit unitA, double valueB, EnergyEfficiencyUnit unitB, bool expectEqual)
        {
            var a = new EnergyEfficiency(valueA, unitA);
            var b = new EnergyEfficiency(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = EnergyEfficiency.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.True(v.Equals(EnergyEfficiency.FromWattHoursPerKilometer(1), WattHoursPerKilometerTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(EnergyEfficiency.Zero, WattHoursPerKilometerTolerance, ComparisonType.Relative));
            Assert.True(EnergyEfficiency.FromWattHoursPerKilometer(100).Equals(EnergyEfficiency.FromWattHoursPerKilometer(120), (double)0.3m, ComparisonType.Relative));
            Assert.False(EnergyEfficiency.FromWattHoursPerKilometer(100).Equals(EnergyEfficiency.FromWattHoursPerKilometer(120), (double)0.1m, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(EnergyEfficiency.FromWattHoursPerKilometer(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.False(watthourperkilometer.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            EnergyEfficiency watthourperkilometer = EnergyEfficiency.FromWattHoursPerKilometer(1);
            Assert.False(watthourperkilometer.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(EnergyEfficiencyUnit)).Cast<EnergyEfficiencyUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(EnergyEfficiency.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 fWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.FemtowattHourPerKilometer).ToString());
                Assert.Equal("1 fWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.FemtowattHourPerMeter).ToString());
                Assert.Equal("1 GWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.GigawattHourPerKilometer).ToString());
                Assert.Equal("1 GWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.GigawattHourPerMeter).ToString());
                Assert.Equal("1 kWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.KilowattHourPerKilometer).ToString());
                Assert.Equal("1 kWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.KilowattHourPerMeter).ToString());
                Assert.Equal("1 MWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.MegawattHourPerKilometer).ToString());
                Assert.Equal("1 MWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.MegawattHourPerMeter).ToString());
                Assert.Equal("1 µWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.MicrowattHourPerKilometer).ToString());
                Assert.Equal("1 µWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.MicrowattHourPerMeter).ToString());
                Assert.Equal("1 mWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.MilliwattHourPerKilometer).ToString());
                Assert.Equal("1 mWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.MilliwattHourPerMeter).ToString());
                Assert.Equal("1 nWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.NanowattHourPerKilometer).ToString());
                Assert.Equal("1 nWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.NanowattHourPerMeter).ToString());
                Assert.Equal("1 pWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.PicowattHourPerKilometer).ToString());
                Assert.Equal("1 pWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.PicowattHourPerMeter).ToString());
                Assert.Equal("1 Wh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.WattHourPerKilometer).ToString());
                Assert.Equal("1 Wh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.WattHourPerMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 fWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.FemtowattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 fWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.FemtowattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 GWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.GigawattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 GWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.GigawattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.KilowattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 kWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.KilowattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.MegawattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 MWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.MegawattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.MicrowattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 µWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.MicrowattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.MilliwattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 mWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.MilliwattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 nWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.NanowattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 nWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.NanowattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 pWh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.PicowattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 pWh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.PicowattHourPerMeter).ToString(swedishCulture));
            Assert.Equal("1 Wh/km", new EnergyEfficiency(1, EnergyEfficiencyUnit.WattHourPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 Wh/m", new EnergyEfficiency(1, EnergyEfficiencyUnit.WattHourPerMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentCulture;
            try
            {
                CultureInfo.CurrentCulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s1"));
                Assert.Equal("0.12 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s2"));
                Assert.Equal("0.123 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s3"));
                Assert.Equal("0.1235 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentCulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s1", culture));
            Assert.Equal("0.12 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s2", culture));
            Assert.Equal("0.123 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s3", culture));
            Assert.Equal("0.1235 Wh/km", new EnergyEfficiency(0.123456, EnergyEfficiencyUnit.WattHourPerKilometer).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(EnergyEfficiency)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(EnergyEfficiencyUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(EnergyEfficiency.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(EnergyEfficiency.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(1.0);
            Assert.Equal(new {EnergyEfficiency.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = EnergyEfficiency.FromWattHoursPerKilometer(value);
            Assert.Equal(EnergyEfficiency.FromWattHoursPerKilometer(-value), -quantity);
        }
    }
}
